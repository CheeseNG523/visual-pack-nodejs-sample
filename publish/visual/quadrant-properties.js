namespace("fx.quadrantProperties")["myCustomVisual"] = (function (ko, _, leesa, fx, fxDataContext, fxUtil, fxEnum, Quill) {

  const observable = ko.observable;
  const computed = ko.computed;
  const fxUnwrap = fxUtil.unwrap;

  function viewModel(params) {

    const fxQuadrant = params.quadrantViewModel;
    const refreshQuadrant = fxQuadrant.refreshQuadrant;
    const quadrantComposer = fxQuadrant.quadrantComposer;
    const projectionEntityManager = quadrantComposer.projectionEntityManager;
    const koProjections = projectionEntityManager.entities;
    const koQuadrant = quadrantComposer.quadrant;
    const koSource = quadrantComposer.source;
    const koVisual = quadrantComposer.visual;
    const koSelectedConnectionSource = computed(function () {
      return fxQuadrant.selectedConnectionSource();
    });

    const properties = [
      {propertyName: "titlePath"},
      {propertyName: "descriptionPath"},
      {propertyName: "googleMapUrlPath"}
    ];

    init();

    //#region Private Methods

    function init() {
      initProperties();
      initSubscribers();
      initValues();
      initEvents();
    }

    function initProperties() {
      //check for every property in properties, if there is no propertyBinding, then it will create a default observable
      for (let i = 0; i < properties.length; i++) {
        let property = properties[i];
        if (!("propertyBinding" in property))
          property.propertyBinding = observable();
        //this won't replace the edit mode value, because we haven't initialize subscribers
        if ("defaultValue" in property)
          property.propertyBinding(property.defaultValue);
      }
    }

    function initSubscribers() {
      //subscribe every observable binding in property to update the parameter value in visual parameter
      for (var i = 0; i < properties.length; i++) {
        const property = properties[i];
        const kopropertyBinding = property.propertyBinding;
        const propertyName = property.propertyName;
        (function (name) {
          kopropertyBinding.subscribe(function (value) {
            setParameterValue(name, value);
          })

        })(propertyName)
      }
    }

    function initValues() {
      //if in edit mode there are some value, this will put the value to each particular property binding
      var parameters = koVisual().parameters || {};
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var parameterValue = parameters[property.propertyName]
        if (parameterValue != undefined) {
          property.propertyBinding(parameterValue);
        }
      }
    }

    function initEvents() {
      projectionsChangeEventSubscription = koProjections.subscribe(function (newProjectionContexts) {
        var source = koSource();
        source.projections = _.map(newProjectionContexts, fxUnwrap);
        refreshQuadrant();
      });

      //COLOR PALETTE
      ko.bindingHandlers.toggleDropdown = {
        init: function (element, valueAccessor) {
          var value = valueAccessor();

          ko.utils.registerEventHandler(element, "click", function () {
            if (value() == "0px")
              value("200px");
            else
              value("0px");
          });
        }
      }
      //COLOR PALETTE

    }

    //#region Converter

    //#endregion
    
    function setParameterValue(path, value) {
      let visual = koVisual();
      let parameters = visual.parameters || {};
      parameters[path] = value;
      visual.parameters = parameters;
      refreshQuadrant()
    }

    function generatePropertyBindings() {
      var bindings = {};
      for (let i = 0; i < properties.length; i++) {
        const property = properties[i];
        const propertyName = property.propertyName;
        const propertyBinding = property.propertyBinding;
        bindings[propertyName] = propertyBinding;
      }
      return bindings;
    }

    //#endregion

    var me = this;
    $.extend(true, me, generatePropertyBindings(), {
      quadrantViewModel: fxQuadrant,
      // Properties
      quadrant: koQuadrant,
      quadrantComposer: quadrantComposer,
      selectedConnectionSource: koSelectedConnectionSource,

      //some observables properties already generated by generatePropertyBindings

      //observables

      //COLOR PALETTE
      // colorDropdown: colorDropdown,
      // colorPalette: koColorPalettes,
      // selectedColor: koSelectedColor,
      // selectedColorName: koSelectedColorName,
      // changeColorEvent: changeColorEvent,
      //COLOR PALETTE
      // Computed
      // Action
      //Events
    });
  }

  viewModel.prototype.dispose = function () {
    const subscription = this.projectionsChangeEventSubscription;
    if (subscription)
      subscription.dispose();
  };

  return {
    viewModel: viewModel
  };
})(ko, _, leesa, fx, fx.DataContext, fx.util, fx.enum, Quill);